# -*- coding: utf-8 -*-
"""02_Feature_Eng.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LpyGO0qlcKT68AdpqzEFRWGK4FQ3s_OQ
"""

# 02_Feature_Eng.ipynb

# ========================
# 1. Import Libraries
# ========================
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from google.colab import files # Import files module for file upload
import os
import io # Import io to read the uploaded file

# ========================
# 2. Choose & Load Dataset
# ========================
print("ðŸ“‚ Please choose your dataset (CSV file)...")
uploaded = files.upload() # Use files.upload() to get the file

# Get the file path from the uploaded files dictionary
for file_name in uploaded.keys():
    file_path = file_name
    print(f"User uploaded file '{file_name}'")

# Read the chosen CSV
# Use io.BytesIO to read the file content directly from the uploaded dictionary
df = pd.read_csv(io.BytesIO(uploaded[file_path]))
print("âœ… Dataset Loaded Successfully!")
display(df.head())

# ========================
# 3. Handle Missing Values
# ========================
df = df.fillna(0)   # Simple strategy (can be improved)

# ========================
# 4. Encode Categorical Features
# ========================
df_encoded = pd.get_dummies(df, drop_first=True)

# ========================
# 5. Train-Test Split
# ========================
X = df_encoded.drop("Churn_Yes", axis=1) # Changed from "Churn" to "Churn_Yes"
y = df_encoded["Churn_Yes"] # Changed from "Churn" to "Churn_Yes"

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
    )

# ========================
# 6. Feature Scaling
# ========================
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ========================
# 7. Save Processed Data
# ========================
# Modify output directory to be in the content directory if no file path is available
output_dir = os.path.join("/content", "processed")
os.makedirs(output_dir, exist_ok=True)


pd.DataFrame(X_train_scaled, columns=X.columns).to_csv(f"{output_dir}/X_train.csv", index=False)
pd.DataFrame(X_test_scaled, columns=X.columns).to_csv(f"{output_dir}/X_test.csv", index=False)
y_train.to_csv(f"{output_dir}/y_train.csv", index=False)
y_test.to_csv(f"{output_dir}/y_test.csv", index=False)

print(f"âœ… Feature engineering completed & saved processed datasets in: {output_dir}")